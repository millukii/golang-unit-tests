// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "go-tests/models"

	mock "github.com/stretchr/testify/mock"
)

// CategoryCountryRepo is an autogenerated mock type for the CategoryCountryRepo type
type CategoryCountryRepo struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id, country
func (_m *CategoryCountryRepo) GetById(id int, country string) (*models.CategoryCountry, error) {
	ret := _m.Called(id, country)

	var r0 *models.CategoryCountry
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*models.CategoryCountry, error)); ok {
		return rf(id, country)
	}
	if rf, ok := ret.Get(0).(func(int, string) *models.CategoryCountry); ok {
		r0 = rf(id, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CategoryCountry)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCategoryCountryRepo creates a new instance of CategoryCountryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryCountryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryCountryRepo {
	mock := &CategoryCountryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
